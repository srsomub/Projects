import pandas as pd
from datetime import datetime
import s3fs

from airflow.providers.postgres.hooks.postgres import PostgresHook
from airflow.operators.python import PythonOperator


def kelvin_to_fahrenheit(temp_in_kelvin):
    temp_in_fahrenheit = (temp_in_kelvin - 273.15) * (9/5) + 32
    return str(round(temp_in_fahrenheit,3))+"°F"

def kelvin_to_degree(temp_in_kelvin):
    temp_in_degree = temp_in_kelvin - 273.15
    return str(round(temp_in_degree,3))+"°C"


# task_instance take data generated by task defined as task_id
def transform_load_data(task_instance):
    data = task_instance.xcom_pull(task_ids="group_a.extract_houston_weather_data_tsk")  
    # xcom tab consist of output return by that particular task (Here we need output of Task2.3)

    city = data["name"]
    weather_description = data["weather"][0]['description']
    temp_farenheit = kelvin_to_fahrenheit(data["main"]["temp"])
    temp_degree = kelvin_to_degree(data["main"]["temp"])
    feels_like_farenheit= kelvin_to_fahrenheit(data["main"]["feels_like"])
    min_temp_farenheit = kelvin_to_fahrenheit(data["main"]["temp_min"])
    max_temp_farenheit = kelvin_to_fahrenheit(data["main"]["temp_max"])
    min_temp_degree = kelvin_to_degree(data["main"]["temp_min"])
    max_temp_degree= kelvin_to_degree(data["main"]["temp_max"])
    pressure = data["main"]["pressure"]
    humidity = data["main"]["humidity"]
    wind_speed = data["wind"]["speed"]
    time_of_record = datetime.utcfromtimestamp(data['dt'] + data['timezone'])
    sunrise_time = datetime.utcfromtimestamp(data['sys']['sunrise'] + data['timezone'])
    sunset_time = datetime.utcfromtimestamp(data['sys']['sunset'] + data['timezone'])

    transformed_data = {"City": city,
                        "Description": weather_description,
                        "Temperature (F)": temp_farenheit,
                        "Temperature (C)": temp_degree,
                        "Feels Like (F)": feels_like_farenheit,
                        "Minimun Temp (F)":min_temp_farenheit,
                        "Maximum Temp (F)": max_temp_farenheit,
                        "Minimun Temp (C)":min_temp_degree,
                        "Maximum Temp (C)": max_temp_degree,
                        "Pressure": pressure,
                        "Humidity": humidity,
                        "Wind Speed": wind_speed,
                        "Time of Record": time_of_record,
                        "Sunrise (Local Time)":sunrise_time,
                        "Sunset (Local Time)": sunset_time                        
                        }
    transformed_data_list = [transformed_data]
    df_data = pd.DataFrame(transformed_data_list)
    aws_credentials = {"key": "AKIAYJ2CJXL6YIR4II6I", "secret": "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","token": "FwoGZXIvYXdzEO7//////////wEaDJff+OEhK7h+3610YCKCAZtP3nghN89B6Cnp+dbL2fH3e6ZhlhBAqUNXNKaIMxRF407GNvdPSf6xuZaVvPv9eamHujDDYc3Nr74VMxpIJ8g2QYuQM21nKwe2c37GgYMAVpcevW+U0wiGD5ovgY79LeZJvCiOImfvHxfw1stbWVBhYgvz5WM35E/8guIvxdR6OG0onP6IqgYyKEtfJhSCJuJ6OfwZi7AksQSrbGjewFOkG6v11YG3Y5pbYHxY/TnchEs="}

    # now = datetime.now()
    # dt_string = now.strftime("%d%m%Y%H%M%S")   # Required date time format
    # dt_string = 'current_weather_data_portland_' + dt_string

    df_data.to_csv(f"s3://myy-s3-buckett/houston_data.csv", index=False)

    # df_data.to_csv("houston_data.csv", index=False)


def loading():
    hook = PostgresHook(postgres_conn_id = 'postgres_conn')
    hook.copy_expert(
        sql= "COPY weather_data FROM stdin WITH DELIMITER as ','",
        filename='houston_data.csv'
    )

def save_join_tbl_to_s3(task_instance):
    join_data = task_instance.xcom_pull(task_ids = "task_join_data")
    df = pd.DataFrame(join_data, columns = ['city', 'description', 'temperature_farenheit', 'feels_like_farenheit', 'minimun_temp_farenheit', 'maximum_temp_farenheit', 'pressure','humidity', 'wind_speed', 'time_of_record', 'sunrise_local_time', 'sunset_local_time', 'state', 'census_2020', 'land_area_sq_mile_2020'])
    # df.to_csv("joined_weather_data.csv", index=False)
    now = datetime.now()
    dt_string = now.strftime("%d%m%Y%H%M%S")
    dt_string = 'joined_weather_data_' + dt_string
    df.to_csv(f"s3://myy-s3-buckett/{dt_string}.csv", index=False)




